#
# Config file for monitoring general processes for all node types
#

# Check the sshd process and verify that we can connect to the port.
check process sshd with pidfile /var/run/sshd.pid
  start program = "/etc/init.d/sshd start" with timeout 60 seconds
  stop program  = "/etc/init.d/sshd stop"
  if failed port 22 protocol ssh then restart
  if 3 restarts within 5 cycles then timeout

check process glusterd with pidfile /var/run/glusterd.pid
  start program = "/etc/init.d/glusterd start" with timeout 60 seconds
  stop program  = "/etc/init.d/glusterd stop"
  if 3 restarts within 5 cycles then timeout

# Check to make sure the glusterfsd processes are loaded. There are no pid files so we will
# rely on the exit status from the init script.
check program glusterfsd with path "/etc/init.d/glusterfsd status"
  start program = "/etc/init.d/glusterfsd start" with timeout 60 seconds
  stop program  = "/etc/init.d/glusterfsd stop"
  if status != 0 then restart
  if 3 restarts within 5 cycles then timeout

# Check to make sure iptables is loaded. There is no iptables process so we have to
# rely on the lock file.
check file iptabels with path /var/lock/subsys/iptables
  start program = "/etc/init.d/iptables start" with timeout 60 seconds
  stop program  = "/etc/init.d/iptables stop"
  if 3 restarts within 5 cycles then timeout

check process memcached with pidfile /var/run/memcached/memcached.pid
  start program = "/etc/init.d/memcached start" with timeout 60 seconds
  stop program  = "/etc/init.d/memcached stop"
  if 3 restarts within 5 cycles then timeout

check process qpidd with pidfile /var/run/qpidd.pid
  start program = "/etc/init.d/qpidd start" with timeout 60 seconds
  stop program  = "/etc/init.d/qpidd stop"
  if 3 restarts within 5 cycles then timeout

# The following processes will need to be monitored in the future when we start supporting HA configs.

#check process corosync with pidfile /var/run/corosync.pid
#  start program = "/etc/init.d/corosync start" with timeout 60 seconds
#  stop program  = "/etc/init.d/corosync stop"
#  if 3 restarts within 5 cycles then timeout

#check corosync-notifyd agent with pidfile /var/run/corosync-notifyd.pid
#  start program = "/etc/init.d/corosync-notifyd start" with timeout 60 seconds
#  stop program  = "/etc/init.d/corosync-notifyd stop"
#  if 3 restarts within 5 cycles then timeout

#check process pacemaker with pidfile /var/run/pacemaker.pid
#  start program = "/etc/init.d/pacemaker start" with timeout 60 seconds
#  stop program  = "/etc/init.d/pacemaker stop"
#  if 3 restarts within 5 cycles then timeout
